[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sqltest-pro"
version = "0.1.0"
description = "A comprehensive Python-based testing framework for SQL code with unit testing, data validation, profiling, and business rule verification"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "David Schaaf", email = "your.email@example.com"}
]
maintainers = [
    {name = "David Schaaf", email = "your.email@example.com"}
]
keywords = [
    "sql",
    "testing",
    "data-validation",
    "database",
    "profiling",
    "unit-testing",
    "data-quality"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Utilities"
]
requires-python = ">=3.9"
dependencies = [
    # CLI Framework
    "click>=8.1.0",
    "rich>=13.0.0",
    
    # Database connectivity
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",  # PostgreSQL
    "pymysql>=1.0.0",          # MySQL
    "pyodbc>=4.0.0",           # SQL Server
    "snowflake-sqlalchemy>=1.4.0",  # Snowflake
    
    # Configuration and validation
    "pyyaml>=6.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Data processing and analysis
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    
    # Data generation and testing
    "faker>=18.0.0",
    
    # Template engine for reports
    "jinja2>=3.1.0",
    
    # Progress bars and utilities
    "tqdm>=4.65.0",
    
    # Validation and type checking
    "email-validator>=2.0.0",
    "python-dateutil>=2.8.0",
    
    # Logging and configuration
    "colorlog>=6.7.0",
    
    # Statistical analysis
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    # Code quality
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "factory-boy>=3.3.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-click>=5.0.0",
]

all = [
    "sqltest-pro[dev,test,docs]"
]

[project.urls]
Homepage = "https://github.com/Schaafd/sql-testing-suite"
Documentation = "https://github.com/Schaafd/sql-testing-suite#readme"
Repository = "https://github.com/Schaafd/sql-testing-suite"
"Bug Reports" = "https://github.com/Schaafd/sql-testing-suite/issues"
"Source Code" = "https://github.com/Schaafd/sql-testing-suite"

[project.scripts]
sqltest = "sqltest.cli.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["sqltest*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
sqltest = [
    "reporting/templates/*.html",
    "reporting/templates/*.css",
    "reporting/templates/*.js",
    "config/schemas/*.yaml",
    "config/schemas/*.json",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["sqltest"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "faker.*",
    "psycopg2.*",
    "pymysql.*",
    "pyodbc.*",
    "snowflake.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=sqltest",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests",
    "database: Tests requiring database connection",
]

# Coverage configuration
[tool.coverage.run]
source = ["sqltest"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S106",
]
